// -*- C++ -*-
//
// Package:    EDMAnalyzer/DM_Analyzer
// Class:      DM_Analyzer
// 
/**\class DM_Analyzer DM_Analyzer.cc EDMAnalyzer/DM_Analyzer/plugins/DM_Analyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Siew Yan Hoh
//         Created:  Wed, 11 May 2016 15:18:40 GMT
//
//


// system include files
#include <memory>
#include <vector>
#include <algorithm>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/one/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

//ROOT required dependencies
#include "TH1D.h"
#include "TH1F.h"
#include "TTree.h"
#include "TLorentzVector.h"

//Helper
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "FWCore/Utilities/interface/InputTag.h"

// Analysis-specified
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/Candidate/interface/Candidate.h"


//
// class declaration
//

// If the analyzer does not use TFileService, please remove
// the template argument to the base class so the class inherits
// from  edm::one::EDAnalyzer<> and also remove the line from
// constructor "usesResource("TFileService");"
// This will improve performance in multithreaded jobs.

class scout : public edm::one::EDAnalyzer<edm::one::SharedResources>  {
   public:
      explicit scout(const edm::ParameterSet&);
      ~scout();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:
      virtual void beginJob() override;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
      virtual void endJob() override;

      // ----------member data ---------------------------

  // std::vector<reco::GenParticle> IndexByPt(std::vector<reco::GenParticle> vector);

  //struct comp {
  //bool operator() (reco::GenParticle& i,reco::GenParticle& j) { return ( (i.pt()) > (j.pt()) ); } // sort in descending order 
  // };

  //Token
  edm::EDGetTokenT<reco::GenParticleCollection> tok_gen;

  //InputTag
  edm::InputTag genParticleTag_;

  //vector
  //std::vector<reco::GenParticle> bjets;

  //LorentzVector
  //TLorentzVector dmSystem;
  //TLorentzVector dm;

  //TH1D
  //TH1D *Njet;
  //TH1D *pdg;
  //TH1D *status;

  //TH1F
  //TH1F *ptb1;
  //TH1F *ptb2;
  //TH1F *etab1;
  //TH1F *etab2;

  //TH1F *phipt;
  //TH1F *etaphi;
  //TH1F *phimass;

  //TH1F *chichipt;
  //TH1F *chichimass;

  //third jet
  //TH1F *ptj3;
  //TH1F *etaj3;

  //bjet1 daughter
  //TH1D *Ndoug;
  //TH1D *dougstatus;
  //TH1D *dougpdgid;

  //Tree for acceptance
  //Double_t met[7];
  //Float_t acc[7];
  //TTree *a;

  //variable
  //double countEvent = 0;
  //double countEventPass[7]={0.,0.,0.,0.,0.,0.,0.};

  int counter;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
scout::scout(const edm::ParameterSet& iConfig):
  genParticleTag_(iConfig.getUntrackedParameter<edm::InputTag>("genParticleTag"))

{
   //now do what ever initialization is needed
  // usesResource("TFileService");

   //Token
   tok_gen = consumes<reco::GenParticleCollection>(genParticleTag_);

   //edm::Service<TFileService> fs;
   
   //global 
   //Njet       = fs->make<TH1D>( "Njet"   , "Jet Multiplicity"     , 10  , -0.5 , 9.5 );
   //pdg        = fs->make<TH1D>( "pdg"    , "pdgid in event"       , 30  , -30. , 30. );
   //status     = fs->make<TH1D>( "status" , "status code of Event" , 100 , 0.   , 100 );

   //process kinematics
   //ptb1       = fs->make<TH1F>( "ptb1"  , "P_{T} of the leading b jet; Pt_{bjet1} [GeV/c]; Events"    , 100 , 0.  , 500. );
   //ptb2       = fs->make<TH1F>( "ptb2"  , "P_{T} of second leading b jet; Pt_{bjet2} [GeV/c]; Events" , 100 , 0.  , 500. );
   //etab1      = fs->make<TH1F>( "etab1" , "Eta of the leading b jet; #eta_{bjet1}; Events"            , 100 , -5. , 5.   );
   //etab2      = fs->make<TH1F>( "etab2" , "Eta of the second leading b jet; #eta_{bjet2} ; Events"    , 100 , -5. , 5.   );

   //phipt      = fs->make<TH1F>( "phipt"   , "P_{T} of #Phi; Pt_{#Phi} [GeV/c]; Events"      , 100 , 0.  , 500.  );
   //etaphi     = fs->make<TH1F>( "etaphi"  , "Eta of #Phi; #eta_{#Phi} ; Events"             , 100 , -5. , 5.    );
   //phimass    = fs->make<TH1F>( "phimass" , "Inv mass of #Phi; M(#Phi) [GeV/c^{2}]; Events" , 100 , 0.  , 1500. );

   //chichipt   = fs->make<TH1F>( "chichipt"   , "P_{T} of #chi#tilde{#chi}; Pt_{#chi#tilde{#chi}} [GeV/c]; Events" , 100 , 0. , 500.  );
   //chichimass = fs->make<TH1F>( "chichimass" , "Inv mass of #chi#tilde{#chi}; M(#chi#chi) [GeV/c^{2}]; Events"    , 100 , 0. , 1500. );

   //ptj3       = fs->make<TH1F>( "ptj3"  , "P_{T} of the third light jet; Pt_{jet3} [GeV/c]; Events"    , 100 , 0.  , 500. );
   //etaj3      = fs->make<TH1F>( "etaj3" , "Eta of the third light jet; #eta_{jet3}; Events"            , 100 , -5. , 5.   );

   //bjet1 daughter
   //Ndoug = fs->make<TH1D>( "Ndoug"   , "leading bjet number of daugther"     , 10  , -0.5 , 9.5 );
   //dougstatus = fs->make<TH1D>( "dougstatus"   , "leading bjet daughter status"     , 100  , -0.5 , 99.5 );
   //dougpdgid = fs->make<TH1D>( "dougpdgid"   , "leading bjet daughter pdgid"     , 10  , -0.5 , 9.5 );

   //Tree
   //a = fs->make<TTree>("a","Acceptance");
   //a->Branch("met",met,"met[7]/D");
   //a->Branch("acc",acc,"acc[7]/F");

   //variable initialization
   //bjets.clear();
   counter=0;
}


scout::~scout()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//
/*
std::vector<reco::GenParticle> scout::IndexByPt(std::vector<reco::GenParticle> vector)
{
  comp comparator;

  std::sort (vector.begin() , vector.end() , comparator);
  return vector;
}
*/
// ------------ method called for each event  ------------
void
scout::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{                                                                  

   using namespace edm;
   using namespace reco;
   //using reco::GenParticleCollection;

   Handle<GenParticleCollection> var1;
   iEvent.getByToken(tok_gen, var1);

   std::cout<<"Each event contains a huge collection of genParticles"<<std::endl;
   std::cout<<"Into genParticleCollection in nEvent = "<<counter<<std::endl;
   std::cout<<"The size of genParticleCollection = "<<var1->size()<<std::endl;

   for( size_t i=0 ; i < var1->size() ; ++i )
     {
       //std::cout<<"here loop"<<std::endl;
       const GenParticle &p = (*var1)[i];
       const Candidate *mom = p.mother();
       //std::cout<<"here loop middle before mother"<<std::endl;
       
       
       if( /*abs(p.pdgId()) == 5 ||
	     abs(p.pdgId()) == 9100000*/
	  /*(abs(p.pdgId()) < 6 && p.status() == 71)*/ 
	  /*(p.status() == 71)*/
	  /*abs(p.pdgId()) <= 4 && ( (p.status() > 70) && (p.status() < 80 ) )*/
	  /*p.isHardProcess() */ //hardprocess with 21,22,23
	  /*( abs(p.pdgId()) == 5 || p.pdgId() == -2 ) && p.status() == 71*/
	  p.fromHardProcess()
	  /*(p.status() == 22) || (p.status() == 23)*/
	  /*p.fromHardProcessFinalState()*/ //only the chi dark matter
	  /*p.fromHardProcessDecayed()*/ //null
	  /*p.fromHardProcessBeforeFSR()*/
	  /*(mom->status() == 23)*/ )
	 {
	 size_t n = p.numberOfDaughters(); 
	 
	 std::cout<<"======================================================"<<std::endl;
	 std::cout<<"->Find a pdgid = "<<p.pdgId()<<" and status = "<<p.status() <<" particle in genParticleCollection"<<std::endl;
	 std::cout<<"-->Who has a mother pdgid= "<<mom->pdgId()<<" and status = "<<mom->status()<<std::endl;
	 std::cout<<"--->The daughter(s) is(are):"<<std::endl;
	 for(size_t j = 0; j < n; ++ j)
	   {                                                             
	     const Candidate *d = p.daughter(j);
	     std::cout<<"----> ("<<j<<") daughter.pdgId() = "<<d->pdgId()<<" & daughter.status() = "<<d->status()<<std::endl;
	   }
	 std::cout<<"=================================================="<<std::endl;
       }
       //std::cout<<"here loop end"<<std::endl;
       
     }
   counter++;
   
#ifdef THIS_IS_AN_EVENT_EXAMPLE
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);
#endif
   
#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
#endif
}


// ------------ method called once each job just before starting event loop  ------------
void 
scout::beginJob()
{

}

// ------------ method called once each job just after ending the event loop  ------------
void 
scout::endJob() 
{

  std::cout<<"nEvent = "<<counter<<std::endl;
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
scout::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(scout);
